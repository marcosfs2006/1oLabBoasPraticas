x <- c(58, 60, 61, 62, 61, 57, 63, 62, 61, 58, 61, 60, 60, 50, 53, 64, 61, 55, 55,
56, 61, 58, 67, 47, 62, 68, 57, 63, 72, 58)
stripchart(x, method = "stack", pch='16', cex = 2)
stripchart(x, method = "stack", pch=16, cex = 2)
stripchart(x, method = "stack", pch=16, cex = 2, at=0)
stem(x, scale = 2)
1 - (1/2*20)
1 - (1/2*20)
1 - (1/(2*20))
pchauv <- 1 - (1/(2*20))
qnorm(pchauv)
pchauv <- 1 - (1/(2*20))
dnorm(pchauv)
pchauv
qnorm(pchauv)
qnorm(pchauv, lower.tail = F)
qnorm(pchauv/2)
qnorm(pchauv * 2)
x <- c(2.3,4.2,3.2,4.1,1.1,5.4,3.3,4.4,3.7,2.7,3.0,1.9,7.9,4.6,3.4)
N <- length(x)                    #  number of data points
z <- (x-mean(x))/sd(x)            # data z values
p_chauv <- 1-1/(2*N)              #  Chauvenet probability band value
z_max <- qnorm(0.5 +0.5 * p_chauv) #  maximum allowable z value
z_min <- -z_max                   #  minimum allowable z value
x_max <- mean(x) + z_max*sd(x)    #  maximum allowable data value
x_min <- mean(x) + z_min*sd(x)    #  minimum allowable data value
plot(x, ylim = c(min(x)-1,max(x)+1))    # plot the data
abline(h=x_min,col="red",lw=2)    #  mark minimum allowable data value > abline(h=x_max,col="red",lw=2)    #  mark maximum allowable data value
plot(x, ylim = c(min(x)-1,max(x)+1))    # plot the data
abline(h=x_min,col="red",lw=2)          #  mark minimum allowable data value abline(h=x_max,col="red",lw=2)          #  mark maximum allowable data value
x <- c(2.3,4.2,3.2,4.1,1.1,5.4,3.3,4.4,3.7,2.7,3.0,1.9,7.9,4.6,3.4)
N <- length(x)                     #  number of data points
z <- (x-mean(x))/sd(x)             # data z values
p_chauv <- 1-1/(2*N)               #  Chauvenet probability band value
z_max <- qnorm(0.5 +0.5 * p_chauv) #  maximum allowable z value
z_min <- -z_max                    #  minimum allowable z value
x_max <- mean(x) + z_max*sd(x)     #  maximum allowable data value
x_min <- mean(x) + z_min*sd(x)     #  minimum allowable data value
plot(x, ylim = c(min(x)-1,max(x)+1))    # plot the data
abline(h=x_min,col="red",lw=2)          #  mark minimum allowable data value abline(h=x_max,col="red",lw=2)          #  mark maximum allowable data value
x_max
x_min
plot(x, ylim = c(min(x) - 1, max(x) + 1))
abline(h=x_max, col="red",lw=2)
abline(h=x_min, col="red",lw=2)
boxplot(x)
stripchart(x, method="stack", pch=16, at=0, cex=2)
chauvenet <- function(x, plot=FALSE){
# x - vetor numérico contendo os dados
# A função retorna os valore que devem ser excluídos pelo critério de chauvenet
N <- length(x)                      #  number of data points
z <- (x - mean(x)) / sd(x)              # data z values
p_chauv <- 1 - 1/(2*N)                #  Chauvenet probability band value
z_max <- qnorm(0.5 + 0.5 * p_chauv) #  maximum allowable z value
z_min <- -z_max                     #  minimum allowable z value
x_max <- mean(x) + z_max * sd(x)     #  maximum allowable data value
x_min <- mean(x) + z_min * sd(x)     #  minimum allowable data value
if(plot){
plot(x, ylim = c(min(x) - 1, max(x) + 1))    # plot the data
abline(h=x_min, col="red", lw=2)              #  mark minimum allowable data value       abline(h=x_max, col="red", lw=2)              #  mark maximum allowable data value
}
subset(x, x < x_min | x > x_max)
}
chauvenet(x)
chauvenet(x, plot=T)
chauvenet <- function(x, plot=FALSE){
# x - vetor numérico contendo os dados
# A função retorna os valore que devem ser excluídos pelo critério de chauvenet
N <- length(x)                      #  number of data points
z <- (x - mean(x)) / sd(x)              # data z values
p_chauv <- 1 - 1/(2*N)                #  Chauvenet probability band value
z_max <- qnorm(0.5 + 0.5 * p_chauv) #  maximum allowable z value
z_min <- -z_max                     #  minimum allowable z value
x_max <- mean(x) + z_max * sd(x)     #  maximum allowable data value
x_min <- mean(x) + z_min * sd(x)     #  minimum allowable data value
if(plot){
plot(x, ylim = c(min(x) - 1, max(x) + 1))     # plot the data
abline(h=x_min, col="red", lw=2)              #  mark minimum allowable data value
abline(h=x_max, col="red", lw=2)              #  mark maximum allowable data value
}
subset(x, x < x_min | x > x_max)
}
chauvenet(x, plot=T)
chauvenet(x, plot=T)
zmaxChauv <- function(N){
p_chauv <- 1 - 1/(2*N)                #  Chauvenet probability band value
z_max <- qnorm(0.5 + 0.5 * p_chauv)   #  maximum allowable z value
z_max
}
zmaxChauv(20)
zmaxChauv(100)
zmaxChauv(3)
zmaxChauv <- function(N){
p_chauv <- 1 - 1/(2*N)                #  Chauvenet probability band value
z_max <- qnorm(0.5 + 0.5 * p_chauv, lower.tail=F)   #  maximum allowable z value
z_max
}
zmaxChauv(3)
zmaxChauv <- function(N){
p_chauv <- 1 - 1/(2*N)                #  Chauvenet probability band value
#z_max <- qnorm(0.5 + 0.5 * p_chauv)   #  maximum allowable z value
z_max <- qnorm(0.5 + p_chauv)   #  maximum allowable z value
z_max
}
zmaxChauv(3)
zmaxChauv <- function(N){
p_chauv <- 1 - 1/(2*N)                #  Chauvenet probability band value
z_max <- qnorm(0.5 + 0.5 * p_chauv)   #  maximum allowable z value
1 - z_max
}
zmaxChauv(3)
?qt
zmaxChauv2 <- function(N){
# Valor crítico de chauvenet... corrigir...
p_chauv <- 1 - 1/(2*N)                #  Chauvenet probability band value
z_max <- qt(0.5 + 0.5 * p_chauv, df=N-2)   #  maximum allowable z value
z_max
}
zmaxChauv2(3)
zmaxChauv2 <- function(N){
# Valor crítico de chauvenet... corrigir...
p_chauv <- 1 - 1/(2*N)                #  Chauvenet probability band value
z_max <- qt(0.5 + 0.5 * p_chauv, df=N-1)   #  maximum allowable z value
z_max
}
zmaxChauv2(3)
rm(list=ls())
options(scipen = 10)
library(readxl)
library(dplyr)
library(ggplot2)
setwd("I:\\Melhores Praticas TCE e Atricon\\ATRICON\\3. Parte Pratica - Laboratorio\\1-capturar dados crp")
source("crpGeraBase.R")
rpps <- read_excel("RELACAO_DOS_ENTES_COM_RPPS.xlsx")
rpps$CNPJ <- ifelse(nchar(rpps$CNPJ) < 14, sprintf("%014.0f",rpps$CNPJ), rpps$CNPJ)
View(rpps)
# Obtem a base de CRP
dados <- crp_captura_dados(cnpj=rpps$CNPJ)
niveis <- c('VENCIDO A MAIS DE 1 ANO',
'VENCIDO ENTRE 181 E 365 DIAS',
'VENCIDO A ATÉ 180 DIAS',
'A VENCER EM 30 DIAS',
'A VENCER ENTRE 31 E 60 DIAS',
'A VENCER ENTRE 61 E 90 DIAS',
'A VENCER ENTRE 91 E 180 DIAS',
'A VENCER A MAIS DE 180')
dados$DtEmissao  <- as.Date(dados$DtEmissao,  '%d/%m/%Y')
dados$DtValidade <- as.Date(dados$DtValidade, '%d/%m/%Y')
dados$dias <- as.numeric(dados$DtValidade - as.Date(Sys.time()))
dados$faixas <- cut(dados$dias,
breaks=c(-Inf, -366, -181, 0, 30, 60, 90, 180, +Inf),
labels=niveis)
# Ordenar os fatores
dados$faixas <- ordered(dados$faixas, levels=niveis)
# ordenar
dados <- arrange(dados, dias)
View(dados)
dados[[40]]
# Excluir coluna 40
dados[[40]] <- NULL
View(dados)
# ordenar
dados <- arrange(dados, dias)
getwd()
# Salvar os dados
saveRDS(dados, file=paste("dadosAL_DtGer_", gsub("/", "-", comment(dados)) ,".rds", sep=""))
View(dados)
shiny::runApp('C:/Users/Marcos/Dropbox/4. ShinyApps/rpps-crp')
# CARREGAR AS FUNÇÕES NECESSÁRIAS
setwd("I:\\Melhores Praticas TCE e Atricon\\ATRICON\\3. Parte Pratica - Laboratorio\\2-importar dados dair\\FI")
source("dairExtraiDadosFI.R")#ok funções auxiliares
source("dairGeraBaseFI.R")   #ok
setwd("..\\APR")
source("dairExtraiDadosAPR.R")
source("dairGeraBaseAPR.R")
# DEFINIR O DIRETÓRIO DE TRABLAHO (XML DAIR 2017)
base_xml_dair_2017 <- "I:\\Melhores Praticas TCE e Atricon\\ATRICON\\3. Parte Pratica - Laboratorio\\2-importar dados dair\\xmlDAIR-2017"
# GERAR BASES DE DADOS DOS DOS FUNDOS DE INVESTIMENTOS
#-----------------------------------------------------
# Vamos gerar bases para 4 RPPS (Pinheiral, Rio Claro, Quatis, Governo de ERJ)
setwd(base_xml_dair_2017)
baseDAIR <- gera_base_dair(base_xml_dair_2017)
View(baseDAIR)
# GERAR BASE DE APR
#-----------------------------------------------------
baseAPR <- dairGeraBaseAPR(base_xml_dair_2017)
source("dairExtraiDadosAPR.R")
setwd("..\\APR")
source("dairExtraiDadosAPR.R")
source("dairGeraBaseAPR.R")
# GERAR BASE DE APR
#-----------------------------------------------------
baseAPR <- dairGeraBaseAPR(base_xml_dair_2017)
# GERAR BASE DE APR
#-----------------------------------------------------
setwd(base_xml_dair_2017)
baseAPR <- dairGeraBaseAPR(base_xml_dair_2017)
# GERAR BASE DE APR
#-----------------------------------------------------
arquivos <- list.files()
arquivos
arquivos[1]
dair_xml_extrai_dados_apr(arquivos[1])
apr_dair <- try(xmlParseDoc(arquivos[1]))
ente <- xpathSApply(apr_dair, '//ente/nomeOrgaoExecutivo', xmlValue)
ente <- gsub("[\n+\t+]|Prefeitura Municipal de |Governo do Estado do ", "", ente)
ente
ano <- xpathSApply(apr_dair, '//exercicio', xmlValue)
mes <- xpathSApply(apr_dair, '//mes', xmlValue)
# e se não tiver APR no DAIR? Questão a ser resolvida...
ativo  <- getNodeSet(apr_dair, '//itensCarteira/aprsFundo/ancestor::itensCarteira/identificacaoDoAtivo')
is.null(ativo)
ativo <- xmlToDataFrame(ativo) # que tenha aprsFundo como sibling
View(ativo)
View(ativo)
names(ativo) <- "identificacaoDoAtivo"
View(ativo)
# Calcula quantos nódulos "aprsFundo" tem no documento.
aprs <- getNodeSet(apr_dair, "//itensCarteira[./aprsFundo]")
View(aprs)
aprs_fundos <- lapply(lapply(aprs, names), function(x) x[x == "aprsFundo"])
aprs_fundos <- sapply(aprs_fundos, length)
View(aprs)
aprs_fundos
# Usa os valores calculados anteriormente para definir quantas vezes um fundo está relacionado a uma APR
fundos <- rep(as.character(ativo$identificacaoDoAtivo), aprs_fundos)
fundos
apr <- getNodeSet(apr_dair, '//itensCarteira/aprsFundo')
apr <- xmlToDataFrame(apr)
View(apr)
apr[, c("numeroAPR", "tipoOperacao", "dataOperacao", "quantidade", "valorOperacao",
"quantidadeAntes", "quantidadeApos", "descricaoOperacao", "caracteristicasAtivos",
"valorAtivoCota")]
apr <- apr[, c("numeroAPR", "tipoOperacao", "dataOperacao", "quantidade", "valorOperacao",
"quantidadeAntes", "quantidadeApos", "descricaoOperacao", "caracteristicasAtivos",
"valorAtivoCota")]
apr[[1]]
xmlToDataFrame(apr, '//itensCarteira/aprsFundo')
xmlToDataFrame(apr)
apr[[1]]
