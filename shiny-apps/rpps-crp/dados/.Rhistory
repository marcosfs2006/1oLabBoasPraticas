options(scipen = 20)
library(readxl)
library(dplyr)
setwd("C:\\Users\\Marcos\\Documents\\GitHub\\rpps\\R")
source("crpGeraBase.R")
setwd("../dados")
cnpj <- read_excel("RELAÇÃO_DOS_ENTES_COM_RPPS.xlsx")   # Entes de todo o Brasil
cnpj$CNPJ <- ifelse(nchar(cnpj$CNPJ) < 14, sprintf("%014.0f",cnpj$CNPJ), cnpj$CNPJ)
# Obtem a base de CRP
dados <- crp_captura_dados(cnpj=cnpj$CNPJ) # a função já introduz comentário na base de dados...
View(dados)
# Eliminar a coluna vazia aqui...
#tudoNA <- apply(dados, 2, function(x) all(is.na(x)))
#dados[, which(tudoNA)] <- NULL
save(dados, file="dados.RData")
# Eliminar a coluna vazia aqui...
#tudoNA <- apply(dados, 2, function(x) all(is.na(x)))
#dados[, which(tudoNA)] <- NULL
dados[[40]] <- NULL
niveis <- c('VENCIDO A MAIS DE 1 ANO', ' VENCIDO ENTRE 181 E 365 DIAS', 'VENCIDO A ATÉ 180 DIAS', 'A VENCER EM 30 DIAS',
'A VENCER ENTRE 31 E 60 DIAS', 'A VENCER ENTRE 61 E 90 DIAS', 'A VENCER ENTRE 91 E 180 DIAS', 'A VENCER A MAIS DE 180')
# Estratificação  (criar uma função????)
dados$DtEmissao  <- as.Date(dados$DtEmissao,  '%d/%m/%Y')
dados$DtValidade <- as.Date(dados$DtValidade, '%d/%m/%Y')
dados$dias <- as.numeric(dados$DtValidade - as.Date(Sys.time()))
dados$faixas <- cut(dados$dias,
breaks=c(-Inf, -366, -181, 0, 30, 60, 90, 180, +Inf),
labels=niveis)
# Ordenar os fatores
dados$faixas <- ordered(dados$faixas, levels=niveis)
# ordenar
dados <- arrange(dados, dias)
# Salvar os dados no aplicativo shiny
setwd("C:\\Users\\Marcos\\Dropbox\\4. ShinyApps\\rpps-crp\\dados")
saveRDS(dados, file=paste("dados_crp_BR_DtGer_", gsub("/", "-", comment(dados)) ,".rds", sep=""))
318*6
View(dados)
rm(list = ls())
search()
#taskscheduler_delete("GeraControleXML") # Excluída
taskscheduleR::taskcheduler_runnow("GeraBaseCRP")
#taskscheduler_delete("GeraControleXML") # Excluída
taskscheduleR::taskcheduler_runnow("GeraBaseCRP")
taskscheduleR::taskcheduler_runnow("GeraBaseCRP")
load(file.choose())
View(dados)
comment(dados)
# Eliminar a coluna vazia aqui...
tudoNA <- apply(dados, 2, function(x) all(is.na(x)))
tudoNA
which(tudoNA)
dados[, which(tudoNA)] <- NULL
View(dados)
niveis <- c('VENCIDO A MAIS DE 1 ANO', ' VENCIDO ENTRE 181 E 365 DIAS', 'VENCIDO A ATÉ 180 DIAS', 'A VENCER EM 30 DIAS',
'A VENCER ENTRE 31 E 60 DIAS', 'A VENCER ENTRE 61 E 90 DIAS', 'A VENCER ENTRE 91 E 180 DIAS', 'A VENCER A MAIS DE 180')
# Estratificação  (criar uma função????)
dados$DtEmissao  <- as.Date(dados$DtEmissao,  '%d/%m/%Y')
dados$DtValidade <- as.Date(dados$DtValidade, '%d/%m/%Y')
dados$dias <- as.numeric(dados$DtValidade - as.Date(Sys.time()))
dados$faixas <- cut(dados$dias,
breaks=c(-Inf, -366, -181, 0, 30, 60, 90, 180, +Inf),
labels=niveis)
# Ordenar os fatores
dados$faixas <- ordered(dados$faixas, levels=niveis)
# ordenar
dados <- arrange(dados, dias)
# Salvar os dados no aplicativo shiny
setwd("C:/Users/Marcos/Dropbox/4. ShinyApps/rpps-crp/dados")
saveRDS(dados, file=paste("dados_crp_BR_DtGer_", gsub("/", "-", comment(dados)) ,".rds", sep=""))
View(dados)
taskscheduler_delete("GeraBaseCRP")
taskscheduleR::taskscheduler_delete("GeraBaseCRP")
taskscheduleR::taskscheduler_create(taskname = "GeraBaseCRP",
rscript = "C:\\Users\\Marcos\\Documents\\GitHub\\rpps\\R\\script_agendamento_gera_base_crp.R",
schedule = "MONTHLY",
months = "*",
days = "3",
starttime = "04:00",
startdate = "02/08/2018") # Agendada com êxito.
shiny::runApp('C:/Users/Marcos/Dropbox/4. ShinyApps/rpps-crp')
